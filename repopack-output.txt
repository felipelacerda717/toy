This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-15T16:28:23.991Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
.mvn/wrapper/maven-wrapper.properties
mvnw
mvnw.cmd
pom.xml
src/main/java/loja/toystore/toy/config/PasswordEncoderConfig.java
src/main/java/loja/toystore/toy/config/SecurityConfig.java
src/main/java/loja/toystore/toy/controller/CartController.java
src/main/java/loja/toystore/toy/controller/HomeController.java
src/main/java/loja/toystore/toy/controller/LoginController.java
src/main/java/loja/toystore/toy/controller/ProductController.java
src/main/java/loja/toystore/toy/controller/UserController.java
src/main/java/loja/toystore/toy/model/CartItem.java
src/main/java/loja/toystore/toy/model/Product.java
src/main/java/loja/toystore/toy/model/User.java
src/main/java/loja/toystore/toy/repository/ProductRepository.java
src/main/java/loja/toystore/toy/repository/UserRepository.java
src/main/java/loja/toystore/toy/service/CartService.java
src/main/java/loja/toystore/toy/service/ProductService.java
src/main/java/loja/toystore/toy/service/UserService.java
src/main/java/loja/toystore/toy/ToyApplication.java
src/main/resources/application.properties
src/main/resources/templates/admin.html
src/main/resources/templates/cart/view.html
src/main/resources/templates/catalog.html
src/main/resources/templates/index.html
src/main/resources/templates/layout.html
src/main/resources/templates/list.html
src/main/resources/templates/login.html
src/main/resources/templates/products/admin/form.html
src/main/resources/templates/products/admin/list.html
src/main/resources/templates/products/catalog.html
src/main/resources/templates/products/search-results.html
src/main/resources/templates/products/view.html
src/main/resources/templates/users/form.html
src/main/resources/templates/users/list.html
src/test/java/loja/toystore/toy/ToyApplicationTests.java

================================================================
Repository Files
================================================================

================
File: .gitignore
================
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

================
File: mvnw.cmd
================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath/>
	</parent>
	<groupId>loja.toystore</groupId>
	<artifactId>toy</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>toy</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>

================
File: src/main/java/loja/toystore/toy/config/PasswordEncoderConfig.java
================
package loja.toystore.toy.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordEncoderConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

================
File: src/main/java/loja/toystore/toy/config/SecurityConfig.java
================
package loja.toystore.toy.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true)
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(authorizeRequests ->
                authorizeRequests
                    .requestMatchers("/", "/home", "/products", "/products/**", "/css/**", "/js/**", "/images/**", "/cart/**").permitAll()
                    .requestMatchers("/products/admin/**").hasRole("ADMIN")
                    .anyRequest().authenticated()
            )
            .formLogin(formLogin ->
                formLogin
                    .loginPage("/login")
                    .permitAll()
            )
            .logout(logout ->
                logout
                    .permitAll()
            );

        return http.build();
    }
}

================
File: src/main/java/loja/toystore/toy/controller/CartController.java
================
package loja.toystore.toy.controller;

import loja.toystore.toy.service.CartService;
import loja.toystore.toy.service.ProductService;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;

@Controller
@RequestMapping("/cart")
public class CartController {
    private static final Logger logger = LoggerFactory.getLogger(CartController.class);

    private final CartService cartService;
    private final ProductService productService;

    @Autowired
    public CartController(CartService cartService, ProductService productService) {
        this.cartService = cartService;
        this.productService = productService;
    }

    @GetMapping
    public String viewCart(Model model) {
        model.addAttribute("cartItems", cartService.getItems());
        model.addAttribute("total", cartService.getTotal());
        return "cart/view";
    }

    @PostMapping("/add")
    public String addToCart(@RequestParam("productId") Long productId, @RequestParam("quantity") int quantity) {
        logger.info("Adding product with ID {} to cart, quantity: {}", productId, quantity);
        productService.getProductById(productId).ifPresent(product -> cartService.addItem(product, quantity));
        return "redirect:/cart";
    }

    @PostMapping("/update")
    public String updateCart(@RequestParam("productId") Long productId, @RequestParam("quantity") int quantity) {
        cartService.updateQuantity(productId, quantity);
        return "redirect:/cart";
    }

    @PostMapping("/remove")
    public String removeFromCart(@RequestParam("productId") Long productId) {
        cartService.removeItem(productId);
        return "redirect:/cart";
    }

    @PostMapping("/clear")
    public String clearCart() {
        cartService.clear();
        return "redirect:/cart";
    }
}

================
File: src/main/java/loja/toystore/toy/controller/HomeController.java
================
package loja.toystore.toy.controller;

import loja.toystore.toy.service.ProductService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
    private final ProductService productService;

    @Autowired
    public HomeController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping("/")
    public String home(Model model) {
        logger.debug("Entering home method");
        try {
            model.addAttribute("featuredProducts", productService.getFeaturedProducts());
            logger.debug("Featured products added to model");
            return "index";
        } catch (Exception e) {
            logger.error("Error in home method", e);
            throw e;
        }
    }
}

================
File: src/main/java/loja/toystore/toy/controller/LoginController.java
================
package loja.toystore.toy.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class LoginController {

    @GetMapping("/login")
    public String login() {
        return "login";
    }
}

================
File: src/main/java/loja/toystore/toy/controller/ProductController.java
================
package loja.toystore.toy.controller;

import loja.toystore.toy.model.Product;
import loja.toystore.toy.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;


@Controller
@RequestMapping("/products")
public class ProductController {

    private final ProductService productService;

    @Autowired
    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    // Exibe todos os produtos no catálogo
    @GetMapping
    public String listProducts(Model model) {
        List<Product> products = productService.getAllProducts();
        model.addAttribute("products", products);
        return "products/catalog"; // Retorna a página do catálogo
    }

    // Exibe detalhes de um produto específico
    @GetMapping("/{id}")
    public String viewProduct(@PathVariable Long id, Model model) {
        return productService.getProductById(id)
                .map(product -> {
                    model.addAttribute("product", product);
                    return "products/view"; // Página de detalhes do produto
                })
                .orElse("redirect:/products");
    }

    // Exibe o formulário para adicionar um novo produto (Admin)
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/admin/new")
    public String newProductForm(Model model) {
        model.addAttribute("product", new Product());
        return "products/admin/form"; // Formulário de novo produto
    }

    // Salva ou atualiza um produto (Admin)
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/admin/save")
    public String saveProduct(@ModelAttribute Product product, @RequestParam("imageFile") MultipartFile imageFile) {
        if (!imageFile.isEmpty()) {
            try {
                // Gere um nome de arquivo único
                String fileName = System.currentTimeMillis() + "_" + imageFile.getOriginalFilename();
                // Defina o caminho onde a imagem será salva
                Path path = Paths.get("src/main/resources/static/images/" + fileName);
                // Salve o arquivo
                Files.write(path, imageFile.getBytes());
                // Atualize o imageUrl do produto
                product.setImageUrl("/images/" + fileName);
            } catch (IOException e) {
                e.printStackTrace();
                // Trate o erro adequadamente
            }
        }
        productService.saveProduct(product);
        return "redirect:/products/admin";
    }

    // Exibe o formulário para editar um produto existente (Admin)
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/admin/edit/{id}")
    public String editProductForm(@PathVariable Long id, Model model) {
        return productService.getProductById(id)
                .map(product -> {
                    model.addAttribute("product", product);
                    return "products/admin/form"; // Formulário de edição do produto
                })
                .orElse("redirect:/products/admin");
    }

    // Deleta um produto pelo ID (Admin)
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/admin/delete/{id}")
    public String deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
        return "redirect:/products/admin"; // Redireciona após deletar o produto
    }

    // Exibe a lista de produtos na visão de administração (Admin)
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/admin")
    public String adminProductList(Model model) {
        model.addAttribute("products", productService.getAllProducts());
        return "products/admin/list"; // Página de administração dos produtos
    }

    // Exibe os produtos de uma categoria específica
    @GetMapping("/category/{category}")
    public String listProductsByCategory(@PathVariable String category, Model model) {
        List<Product> products = productService.getProductsByCategory(category);
        model.addAttribute("products", products);
        model.addAttribute("category", category);
        return "products/category"; // Página de produtos filtrados por categoria
    }

    @GetMapping
    public String listProducts(@RequestParam(defaultValue = "0") int page, 
                               @RequestParam(defaultValue = "10") int size,
                               Model model) {
        Page<Product> productPage = productService.getAllProducts(PageRequest.of(page, size));
        model.addAttribute("products", productPage.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", productPage.getTotalPages());
        model.addAttribute("totalItems", productPage.getTotalElements());
        return "products/list";
    }

    // Pesquisa produtos pelo nome
    @GetMapping("/search")
    public String searchProducts(@RequestParam("query") String query,
                                 @RequestParam(defaultValue = "0") int page,
                                 @RequestParam(defaultValue = "10") int size,
                                 Model model) {
        Page<Product> searchResults = productService.searchProducts(query, PageRequest.of(page, size));
        model.addAttribute("products", searchResults.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", searchResults.getTotalPages());
        model.addAttribute("totalItems", searchResults.getTotalElements());
        model.addAttribute("searchQuery", query);
        return "products/search-results";
    }

    
}

================
File: src/main/java/loja/toystore/toy/controller/UserController.java
================
package loja.toystore.toy.controller;

import loja.toystore.toy.model.User;
import loja.toystore.toy.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping
    @PreAuthorize("hasRole('ADMIN')")
    public String listUsers(Model model) {
        model.addAttribute("users", userService.getAllUsers());
        return "users/list";
    }

    @GetMapping("/create")
    @PreAuthorize("hasRole('ADMIN')")
    public String createUserForm(Model model) {
        model.addAttribute("user", new User());
        return "users/form";
    }

    @PostMapping("/create")
    @PreAuthorize("hasRole('ADMIN')")
    public String createUser(@ModelAttribute User user) {
        userService.createUser(user);
        return "redirect:/users";
    }

    // Adicione mais métodos conforme necessário (editar, excluir, etc.)
}

================
File: src/main/java/loja/toystore/toy/model/CartItem.java
================
package loja.toystore.toy.model;

import java.math.BigDecimal;

public class CartItem {
    private Product product;
    private int quantity;

    public CartItem(Product product, int quantity) {
        this.product = product;
        this.quantity = quantity;
    }

    // Getters e setters

    public Product getProduct() {
        return product;
    }

    public void setProduct(Product product) {
        this.product = product;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public BigDecimal getSubtotal() {
        return product.getPrice().multiply(new BigDecimal(quantity));
    }
}

================
File: src/main/java/loja/toystore/toy/model/Product.java
================
package loja.toystore.toy.model;

import jakarta.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name = "products")
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(length = 1000)
    private String description;

    @Column(nullable = false)
    private BigDecimal price;

    @Column(nullable = false)
    private String category;

    private String imageUrl;

    // Construtores

    public Product() {
    }

    public Product(String name, String description, BigDecimal price, String category, String imageUrl) {
        this.name = name;
        this.description = description;
        this.price = price;
        this.category = category;
        this.imageUrl = imageUrl;
    }

    // Getters e Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }
}

================
File: src/main/java/loja/toystore/toy/model/User.java
================
package loja.toystore.toy.model;

import jakarta.persistence.*;

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String role;

    // Construtores

    public User() {}

    public User(String username, String password, String role) {
        this.username = username;
        this.password = password;
        this.role = role;
    }

    // Getters e Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }
}

================
File: src/main/java/loja/toystore/toy/repository/ProductRepository.java
================
package loja.toystore.toy.repository;

import loja.toystore.toy.model.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.math.BigDecimal;


import java.util.List;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {

    Page<Product> findAll(Pageable pageable);
    Page<Product> findByNameContainingIgnoreCase(String name, Pageable pageable);

    // Buscar produtos por categoria
    List<Product> findByCategory(String category);

    // Buscar produtos por nome (contendo a string de busca, ignorando maiúsculas/minúsculas)
    List<Product> findByNameContainingIgnoreCase(String name);

    // Buscar produtos por faixa de preço
    List<Product> findByPriceBetween(BigDecimal minPrice, BigDecimal maxPrice);

    // Buscar produtos por categoria e ordenar por preço
    List<Product> findByCategoryOrderByPriceAsc(String category);

    // Você pode adicionar mais métodos de consulta personalizados conforme necessário
}

================
File: src/main/java/loja/toystore/toy/repository/UserRepository.java
================
package loja.toystore.toy.repository;

import loja.toystore.toy.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}

================
File: src/main/java/loja/toystore/toy/service/CartService.java
================
package loja.toystore.toy.service;

import loja.toystore.toy.model.CartItem;
import loja.toystore.toy.model.Product;
import org.springframework.stereotype.Service;
import org.springframework.web.context.annotation.SessionScope;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@Service
@SessionScope
public class CartService {
    private List<CartItem> items = new ArrayList<>();

    public void addItem(Product product, int quantity) {
        for (CartItem item : items) {
            if (item.getProduct().getId().equals(product.getId())) {
                item.setQuantity(item.getQuantity() + quantity);
                return;
            }
        }
        items.add(new CartItem(product, quantity));
    }

    public void removeItem(Long productId) {
        items.removeIf(item -> item.getProduct().getId().equals(productId));
    }

    public void updateQuantity(Long productId, int quantity) {
        for (CartItem item : items) {
            if (item.getProduct().getId().equals(productId)) {
                item.setQuantity(quantity);
                return;
            }
        }
    }

    public List<CartItem> getItems() {
        return items;
    }

    public void clear() {
        items.clear();
    }

    public BigDecimal getTotal() {
        return items.stream()
                .map(CartItem::getSubtotal)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
}

================
File: src/main/java/loja/toystore/toy/service/ProductService.java
================
package loja.toystore.toy.service;

import loja.toystore.toy.model.Product;
import loja.toystore.toy.repository.ProductRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ProductService {

    private static final Logger logger = LoggerFactory.getLogger(ProductService.class);
    private final ProductRepository productRepository;

    @Autowired
    public ProductService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    // Obter todos os produtos
    public List<Product> getAllProducts() {
        logger.debug("Getting all products");
        return productRepository.findAll();
    }

    // Obter produto por ID
    public Optional<Product> getProductById(Long id) {
        logger.debug("Getting product with ID {}", id);
        return productRepository.findById(id);
    }

    // Salvar ou atualizar um produto
    public Product saveProduct(Product product) {
        logger.debug("Saving product: {}", product);
        return productRepository.save(product);
    }

    // Deletar produto por ID
    public void deleteProduct(Long id) {
        logger.debug("Deleting product with ID {}", id);
        productRepository.deleteById(id);
    }

    // Obter produtos por categoria
    public List<Product> getProductsByCategory(String category) {
        logger.debug("Getting products by category: {}", category);
        return productRepository.findByCategory(category);
    }

    // Buscar produtos pelo nome (parcialmente)
    public List<Product> searchProductsByName(String name) {
        logger.debug("Searching products by name containing: {}", name);
        return productRepository.findByNameContainingIgnoreCase(name);
    }

    // Obter produtos em destaque (limitado a 3)
    public List<Product> getFeaturedProducts() {
        logger.debug("Getting featured products");
        List<Product> products = productRepository.findAll().stream().limit(3).collect(Collectors.toList());
        logger.debug("Found {} featured products", products.size());
        return products;
    }

    // Obter todas as categorias únicas
    public List<String> getAllCategories() {
        logger.debug("Getting all product categories");
        return productRepository.findAll().stream()
                .map(Product::getCategory)
                .distinct()
                .collect(Collectors.toList());
    }

    public List<Product> searchProducts(String query) {
        return productRepository.findByNameContainingIgnoreCase(query);
    }

    public Page<Product> getAllProducts(Pageable pageable) {
        return productRepository.findAll(pageable);
    }

    public Page<Product> searchProducts(String query, Pageable pageable) {
        return productRepository.findByNameContainingIgnoreCase(query, pageable);
    }
}

================
File: src/main/java/loja/toystore/toy/service/UserService.java
================
package loja.toystore.toy.service;

import loja.toystore.toy.model.User;
import loja.toystore.toy.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.List;

@Service
public class UserService implements UserDetailsService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));

        return org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .roles(user.getRole())
                .build();
    }

    public User createUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public Optional<User> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
}

================
File: src/main/java/loja/toystore/toy/ToyApplication.java
================
package loja.toystore.toy;

import loja.toystore.toy.model.User;
import loja.toystore.toy.model.Product;
import loja.toystore.toy.service.UserService;
import loja.toystore.toy.service.ProductService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

import java.math.BigDecimal;

@SpringBootApplication
public class ToyApplication {

    public static void main(String[] args) {
        SpringApplication.run(ToyApplication.class, args);
    }

    @Bean
    public CommandLineRunner initializeDatabase(UserService userService, ProductService productService) {
        return args -> {
            // Inicialização do usuário admin
            if (userService.findByUsername("admin").isEmpty()) {
                User adminUser = new User("admin", "adminpassword", "ADMIN");
                userService.createUser(adminUser);
                System.out.println("Admin user has been initialized.");
            } else {
                System.out.println("Admin user already exists.");
            }

            // Inicialização de produtos de exemplo
            if (productService.getAllProducts().isEmpty()) {
                productService.saveProduct(new Product("Boneca", "Boneca de pano", new BigDecimal("39.99"), "Brinquedos", "/images/boneca.jpg"));
                productService.saveProduct(new Product("Carrinho", "Carrinho de controle remoto", new BigDecimal("59.99"), "Brinquedos", "/images/carrinho.jpg"));
                productService.saveProduct(new Product("Quebra-cabeça", "Quebra-cabeça de 1000 peças", new BigDecimal("29.99"), "Jogos", "/images/quebra-cabeca.jpg"));
                System.out.println("Sample products have been initialized.");
            } else {
                System.out.println("Products already exist.");
            }
        };
    }
}

================
File: src/main/resources/application.properties
================
spring.application.name=toy

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

# Habilitar console H2
spring.h2.console.enabled=true

# Configurações de logging
logging.level.root=INFO
logging.level.loja.toystore.toy=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Mostrar exceções completas
server.error.include-stacktrace=always

================
File: src/main/resources/templates/admin.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head">
    <title>Administração de Produtos</title>
</head>
<body>
    <div th:replace="layout :: nav"></div>

    <div class="container mt-4">
        <h1>Administração de Produtos</h1>

        <a href="/products/new" class="btn btn-primary mb-3">Adicionar Novo Produto</a>

        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Preço</th>
                    <th>Categoria</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="product : ${products}">
                    <td th:text="${product.id}"></td>
                    <td th:text="${product.name}"></td>
                    <td th:text="${#numbers.formatCurrency(product.price)}"></td>
                    <td th:text="${product.category}"></td>
                    <td>
                        <a th:href="@{/products/edit/{id}(id=${product.id})}" class="btn btn-sm btn-warning">Editar</a>
                        <a th:href="@{/products/delete/{id}(id=${product.id})}" class="btn btn-sm btn-danger" onclick="return confirm('Tem certeza que deseja excluir este produto?')">Excluir</a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div th:replace="layout :: footer"></div>
</body>
</html>

================
File: src/main/resources/templates/cart/view.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title>Carrinho de Compras</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1>Seu Carrinho</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Produto</th>
                    <th>Preço</th>
                    <th>Quantidade</th>
                    <th>Subtotal</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="item : ${cartItems}">
                    <td th:text="${item.product.name}"></td>
                    <td th:text="${#numbers.formatCurrency(item.product.price)}"></td>
                    <td>
                        <form th:action="@{/cart/update}" method="post">
                            <input type="hidden" name="productId" th:value="${item.product.id}">
                            <input type="number" name="quantity" th:value="${item.quantity}" min="1" style="width: 60px;">
                            <button type="submit" class="btn btn-sm btn-secondary">Atualizar</button>
                        </form>
                    </td>
                    <td th:text="${#numbers.formatCurrency(item.subtotal)}"></td>
                    <td>
                        <form th:action="@{/cart/remove}" method="post">
                            <input type="hidden" name="productId" th:value="${item.product.id}">
                            <button type="submit" class="btn btn-sm btn-danger">Remover</button>
                        </form>
                    </td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3"><strong>Total:</strong></td>
                    <td th:text="${#numbers.formatCurrency(total)}"></td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
        <a href="/products" class="btn btn-primary">Continuar Comprando</a>
        <form th:action="@{/cart/clear}" method="post" style="display: inline;">
            <button type="submit" class="btn btn-warning">Limpar Carrinho</button>
        </form>
        <a href="/checkout" class="btn btn-success">Finalizar Compra</a>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/main/resources/templates/catalog.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head">
    <title>Catálogo de Produtos</title>
</head>
<body>
    <div th:replace="layout :: nav"></div>

    <div class="container mt-4">
        <h1>Catálogo de Produtos</h1>

        <div class="row mb-4">
            <div class="col-md-4">
                <select class="form-control" id="categoryFilter">
                    <option value="">Todas as Categorias</option>
                    <option th:each="category : ${categories}" th:value="${category}" th:text="${category}"></option>
                </select>
            </div>
        </div>

        <div class="row">
            <div th:each="product : ${products}" class="col-md-4 mb-4">
                <div class="card">
                    <img th:src="${product.imageUrl}" class="card-img-top" alt="Imagem do produto">
                    <div class="card-body">
                        <h5 class="card-title" th:text="${product.name}">Nome do Produto</h5>
                        <p class="card-text" th:text="${product.description}">Descrição do produto</p>
                        <p class="card-text"><strong>Preço: </strong><span th:text="${#numbers.formatCurrency(product.price)}">R$ 0,00</span></p>
                        <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-primary">Ver Detalhes</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div th:replace="layout :: footer"></div>
</body>
</html>

================
File: src/main/resources/templates/index.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title>Bem-vindo à Loja de Brinquedos</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1>Bem-vindo à Loja de Brinquedos</h1>
        <p class="lead">Descubra nossa incrível seleção de brinquedos para todas as idades!</p>

        <h2 class="mt-5">Produtos em Destaque</h2>
        <div class="row">
            <div class="col-md-4 mb-4" th:each="product : ${featuredProducts}">
                <div class="card">
                    <img th:src="${product.imageUrl}" class="card-img-top" alt="Imagem do produto">
                    <div class="card-body">
                        <h5 class="card-title" th:text="${product.name}">Nome do Produto</h5>
                        <p class="card-text" th:text="${#numbers.formatCurrency(product.price)}">R$ 0,00</p>
                        <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-primary">Ver Detalhes</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer th:replace="layout :: footer"></footer>
    <th:block th:replace="layout :: scripts"></th:block>
</body>
</html>

================
File: src/main/resources/templates/layout.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:fragment="head(title)">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title th:replace="${title}">Loja de Brinquedos</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" th:href="@{/css/style.css}">
</head>
<body>
    <nav th:fragment="nav" class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="/">Loja de Brinquedos</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/">Início</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/products">Catálogo</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/products/admin">Admin</a>
                </li>
                
            </ul>
        </div>

        <form class="form-inline my-2 my-lg-0" th:action="@{/products/search}" method="get">
            <input class="form-control mr-sm-2" type="search" placeholder="Buscar produtos" aria-label="Buscar" name="query">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Buscar</button>
        </form>
    </nav>

    <footer th:fragment="footer" class="footer mt-auto py-3 bg-light">
        <div class="container text-center">
            <span class="text-muted">© 2024 Loja de Brinquedos. Todos os direitos reservados.</span>
        </div>
    </footer>

    <th:block th:fragment="scripts">
        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    </th:block>
</body>
</html>

================
File: src/main/resources/templates/list.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head">
    <title>Catálogo de Produtos</title>
</head>
<body>
    <div th:replace="layout :: nav"></div>

    <div class="container mt-4">
        <h1>Catálogo de Produtos</h1>
        
        <div class="row">
            <div th:each="product : ${products}" class="col-md-4 mb-4">
                <div class="card">
                    <img th:src="${product.imageUrl}" class="card-img-top" alt="Imagem do produto">
                    <div class="card-body">
                        <h5 class="card-title" th:text="${product.name}">Nome do Produto</h5>
                        <p class="card-text" th:text="${product.description}">Descrição do produto</p>
                        <p class="card-text"><strong>Preço: </strong><span th:text="${#numbers.formatCurrency(product.price)}">R$ 0,00</span></p>
                        <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-primary">Ver Detalhes</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div th:replace="layout :: footer"></div>
</body>
</html>

================
File: src/main/resources/templates/login.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Loja de Brinquedos</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h2 class="mb-4">Login</h2>
                <form th:action="@{/login}" method="post">
                    <div th:if="${param.error}">
                        <div class="alert alert-danger">Usuário ou senha inválidos.</div>
                    </div>
                    <div th:if="${param.logout}">
                        <div class="alert alert-info">Você foi desconectado.</div>
                    </div>
                    <div class="form-group">
                        <label for="username">Usuário:</label>
                        <input type="text" class="form-control" id="username" name="username" required autofocus>
                    </div>
                    <div class="form-group">
                        <label for="password">Senha:</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Entrar</button>
                </form>
            </div>
        </div>
    </div>
</body>
</html>

================
File: src/main/resources/templates/products/admin/form.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title th:text="${product.id} ? 'Editar Produto' : 'Novo Produto'">Formulário de Produto</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1 th:text="${product.id} ? 'Editar Produto' : 'Novo Produto'">Formulário de Produto</h1>
        <form th:action="@{/products/admin/save}" th:object="${product}" method="post" enctype="multipart/form-data">
            <input type="hidden" th:field="*{id}">
            <div class="form-group">
                <label for="name">Nome</label>
                <input type="text" class="form-control" id="name" th:field="*{name}" required>
            </div>
            <div class="form-group">
                <label for="description">Descrição</label>
                <textarea class="form-control" id="description" th:field="*{description}" rows="3" required></textarea>
            </div>
            <div class="form-group">
                <label for="price">Preço</label>
                <input type="number" class="form-control" id="price" th:field="*{price}" step="0.01" required>
            </div>
            <div class="form-group">
                <label for="category">Categoria</label>
                <input type="text" class="form-control" id="category" th:field="*{category}" required>
            </div>
            <div class="form-group">
                <label for="imageFile">Imagem do Produto</label>
                <input type="file" class="form-control-file" id="imageFile" name="imageFile" accept="image/*">
            </div>
            <button type="submit" class="btn btn-primary">Salvar</button>
            <a href="/products/admin" class="btn btn-secondary">Cancelar</a>
        </form>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/main/resources/templates/products/admin/list.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title>Administração de Produtos</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1>Administração de Produtos</h1>
        <a href="/products/admin/new" class="btn btn-primary mb-3">Adicionar Novo Produto</a>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Preço</th>
                    <th>Categoria</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="product : ${products}">
                    <td th:text="${product.id}"></td>
                    <td th:text="${product.name}"></td>
                    <td th:text="${#numbers.formatCurrency(product.price)}"></td>
                    <td th:text="${product.category}"></td>
                    <td>
                        <a th:href="@{/products/admin/edit/{id}(id=${product.id})}" class="btn btn-sm btn-warning">Editar</a>
                        <a th:href="@{/products/admin/delete/{id}(id=${product.id})}" class="btn btn-sm btn-danger" onclick="return confirm('Tem certeza que deseja excluir este produto?')">Excluir</a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/main/resources/templates/products/catalog.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title>Catálogo de Produtos</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1>Catálogo de Produtos</h1>
        
        <div class="row">
            <div class="col-md-4 mb-4" th:each="product : ${products}">
                <div class="card">
                    <img th:src="${product.imageUrl}" class="card-img-top" alt="Imagem do produto">
                    <div class="card-body">
                        <h5 class="card-title" th:text="${product.name}">Nome do Produto</h5>
                        <p class="card-text" th:text="${#numbers.formatCurrency(product.price)}">R$ 0,00</p>
                        <p class="card-text" th:text="${product.category}">Categoria</p>
                        <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-primary">Ver Detalhes</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/main/resources/templates/products/search-results.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title>Resultados da Busca</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1>Resultados da Busca para: <span th:text="${searchQuery}"></span></h1>
        
        <div th:if="${#lists.isEmpty(products)}">
            <p>Nenhum produto encontrado para sua busca.</p>
        </div>
        
        <div class="row" th:unless="${#lists.isEmpty(products)}">
            <div class="col-md-4 mb-4" th:each="product : ${products}">
                <div class="card">
                    <img th:src="${product.imageUrl}" class="card-img-top" alt="Imagem do produto">
                    <div class="card-body">
                        <h5 class="card-title" th:text="${product.name}">Nome do Produto</h5>
                        <p class="card-text" th:text="${#numbers.formatCurrency(product.price)}">R$ 0,00</p>
                        <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-primary">Ver Detalhes</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/main/resources/templates/products/view.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title th:text="${product.name}">Detalhes do Produto</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-md-6">
                <img th:src="${product.imageUrl}" class="img-fluid" alt="Imagem do produto">
            </div>
            <div class="col-md-6">
                <h1 th:text="${product.name}">Nome do Produto</h1>
                <p class="lead" th:text="${product.description}">Descrição do produto</p>
                <p><strong>Categoria:</strong> <span th:text="${product.category}">Categoria</span></p>
                <p><strong>Preço:</strong> <span th:text="${#numbers.formatCurrency(product.price)}">R$ 0,00</span></p>
                <form th:action="@{/cart/add}" method="post">
                    <input type="hidden" name="productId" th:value="${product.id}">
                    <div class="form-group">
                        <label for="quantity">Quantidade:</label>
                        <input type="number" id="quantity" name="quantity" value="1" min="1" class="form-control" style="width: 100px;">
                    </div>
                    <button type="submit" class="btn btn-primary">Adicionar ao Carrinho</button>
                </form>
                <a href="/products" class="btn btn-secondary mt-2">Voltar ao Catálogo</a>
            </div>
        </div>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/main/resources/templates/users/form.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title>Criar Novo Usuário</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1>Criar Novo Usuário</h1>
        <form th:action="@{/users/create}" th:object="${user}" method="post">
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" class="form-control" id="username" th:field="*{username}" required>
            </div>
            <div class="form-group">
                <label for="password">Senha:</label>
                <input type="password" class="form-control" id="password" th:field="*{password}" required>
            </div>
            <div class="form-group">
                <label for="role">Role:</label>
                <select class="form-control" id="role" th:field="*{role}">
                    <option value="USER">Usuário</option>
                    <option value="ADMIN">Administrador</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Criar Usuário</button>
        </form>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/main/resources/templates/users/list.html
================
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
<head th:replace="layout :: head(~{::title})">
    <title>Lista de Usuários</title>
</head>
<body>
    <nav th:replace="layout :: nav"></nav>

    <div class="container mt-4">
        <h1>Lista de Usuários</h1>
        <a href="/users/create" class="btn btn-primary mb-3">Criar Novo Usuário</a>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Role</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="user : ${users}">
                    <td th:text="${user.id}"></td>
                    <td th:text="${user.username}"></td>
                    <td th:text="${user.role}"></td>
                    <td>
                        <a th:href="@{/users/edit/{id}(id=${user.id})}" class="btn btn-sm btn-warning">Editar</a>
                        <a th:href="@{/users/delete/{id}(id=${user.id})}" class="btn btn-sm btn-danger" onclick="return confirm('Tem certeza que deseja excluir este usuário?')">Excluir</a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <footer th:replace="layout :: footer"></footer>
</body>
</html>

================
File: src/test/java/loja/toystore/toy/ToyApplicationTests.java
================
package loja.toystore.toy;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ToyApplicationTests {

	@Test
	void contextLoads() {
	}

}
